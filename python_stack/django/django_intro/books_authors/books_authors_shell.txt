These are the commands I used in the Books And Authors Shell assignment

Create the Book Class Model
I created the books_authors project and the main app.
I edited the models.py file in the main app
Here is a copy of the models.py file:

#---------------------------------------------------------------------
from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=255)
    desc = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Author(models.Model):
    first_name = models.CharField(max_length=45)
    last_name = models.CharField(max_length=45)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    books = models.ManyToManyField(Book, related_name="authors")
#---------------------------------------------------------------------

From the terminal prompt I ran the migration files to create tables in my database
python manage.py makemigrations
python manage.py migrate

I created this text file (books_authors_shell.txt) to save each of my assignment queries

I entered the django shell from the Terminal prompt:
python manage.py shell

Query: Create 5 books with the following names C Sharp, Java, Python, PHP, Ruby
From the django shell:

csharp = Book.objects.create(title="C Sharp")
Java = Book.objects.create(title="Java")
Python = Book.objects.create(title="Python")
PHP = Book.objects.create(title="PHP")
Ruby = Book.objects.create(title="Ruby")

Query: Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevksy, William Shakespeare, Lau Tzu

austen = Author.objects.create(first_name = 'Jane', last_name = 'Austen')
dickinson = Author.objects.create(first_name = 'Emily', last_name = 'Dickinson')
dostoevsky = Author.objects.create(first_name = 'Fyodor', last_name = 'Dostoevsky')
shakespeare = Author.objects.create(first_name = 'William', last_name = 'Shakespeare')
tzu = Author.objects.create(first_name = 'Lau', last_name = 'Tzu')

Add a new text field in the authors table called 'notes'.

I added the notes field:
notes = models.TextField()

And exited the django shell and reran python manage.py with the makemigration and migrate in the terminal shell
python manage.py makemigrations (added a null string for the default, on off, when prompted)
python manage.py migrate

I re-entered the django shell
python manage.py shell
and imported my models file:
from main.models import *

Query: Change the name of the C Sharp book to C#

Book.objects.filter(title='C Sharp').update(title='C#')

Query: Change the first name of the 4th author to Bill

Author.objects.filter(id=4).update(first_name='Bill')

Query: Assign the first author to the first 2 books

first_author = Author.objects.get(id=1)
first_book = Book.objects.get(id=1)
second_book = Book.objects.get(id=2)
first_author.books.add(first_book))
first_author.books.add(second_book)

Confirm that first_author does have two books:
print(first_author.books.all())

Query: Assign the second author to the first 3 books
second_author = Author.objects.get(id=2)
I already have the first two books (first_book and second_book). Just get the third book:
third_book = Book.objects.get(id=3)
Now add the three books to the second author
second_author.books.add(first_book)
second_author.books.add(second_book)
second_author.books.add(third_book)

Again, confirm that the second author has three books:
print(second_author.books.all())

Query: Assign the third author to the first 4 books
third_author = Author.objects.get(id=3)
I already have the first three books. Just get the fourth book:
fourth_book = Book.objects.get(id=4)
third_author.books.add(first_book)
third_author.books.add(second_book)
third_author.books.add(third_book)
third_author.books.add(fourth_book)

Again, confirm that the third author has four books:
print(third_author.books.all())

Query: Assign the fourth author to the first 5 books (or in other words, all the books)
fourth_author = Author.objects.get(id=4)
Get the fifth book:
fifth_book = Book.objects.get(id=5)

Add all five books to the fourth author
fourth_author.books.add(first_book)
fourth_author.books.add(second_book)
fourth_author.books.add(third_book)
fourth_author.books.add(fourth_book)
fourth_author.books.add(fifth_book)

Again, confirm that the third author has four books:
print(third_author.books.all())

Query: Retrieve all the authors for the 3rd book
third_book.authors.all()

Query: Remove the first author of the 3rd book
third_book.authors.remove(first_author)	

Query: Add the 5th author as one of the authors of the 2nd book
fifth_author = Author.objects.get(id=5)
second_book.authors.add(fifth_author)
print(second_book.authors.all())

Query: Find all the books that the 3rd author is part of
print(third_author.books.all())

Query: Find all the authors that contributed to the 5th book
print(fifth_book.authors.all())

